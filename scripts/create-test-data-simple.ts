import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function createTestData() {
  console.log('üîç CR√âATION DONN√âES DE TEST');
  console.log('============================\n');

  try {
    // 1. Cr√©er les campus
    console.log('üìã 1. CR√âATION CAMPUS');
    console.log('---------------------');
    
    const campuses = [
      { name: 'Roquette', address: '48 rue de la Roquette, 75011 Paris' },
      { name: 'Picpus', address: '146 rue de Picpus, 75012 Paris' },
      { name: 'Sentier', address: '43 rue du Sentier, 75002 Paris' },
      { name: 'Douai', address: '69 rue de Douai, 75009 Paris' },
      { name: 'Saint-S√©bastien', address: '45 rue Saint-S√©bastien, 75011 Paris' },
      { name: 'Jaur√®s', address: '118 avenue Jean-Jaur√®s, 75019 Paris' },
      { name: 'Parmentier', address: '16 avenue Parmentier, 75011 Paris' },
      { name: 'Boulogne', address: '59 rue de Billancourt, 92100 Boulogne' }
    ];

    for (const campus of campuses) {
      const { error } = await supabase
        .from('campus')
        .insert(campus);
      
      if (error) {
        console.log(`‚ùå Erreur campus ${campus.name}:`, error.message);
      } else {
        console.log(`‚úÖ Campus ${campus.name} cr√©√©`);
      }
    }

    // 2. Cr√©er un super admin
    console.log('\nüìã 2. CR√âATION SUPER ADMIN');
    console.log('--------------------------');
    
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email: 'houssam@aurlom.com',
      password: 'password123',
      email_confirm: true,
      user_metadata: {
        first_name: 'Houssam',
        last_name: 'Admin'
      }
    });

    if (authError) {
      console.log('‚ùå Erreur cr√©ation auth:', authError.message);
    } else {
      console.log('‚úÖ Utilisateur auth cr√©√©:', authUser.user.id);
      
      // Cr√©er le profil
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: authUser.user.id,
          email: 'houssam@aurlom.com',
          first_name: 'Houssam',
          last_name: 'Admin',
          role: 'SUPER_ADMIN',
          campus_id: null
        });
      
      if (profileError) {
        console.log('‚ùå Erreur cr√©ation profil:', profileError.message);
      } else {
        console.log('‚úÖ Profil super admin cr√©√©');
      }
    }

    // 3. Cr√©er un professeur
    console.log('\nüìã 3. CR√âATION PROFESSEUR');
    console.log('-------------------------');
    
    const { data: campus } = await supabase
      .from('campus')
      .select('id')
      .eq('name', 'Jaur√®s')
      .single();
    
    if (campus) {
      const { data: profUser, error: profError } = await supabase.auth.admin.createUser({
        email: 'prof.martin@aurlom.com',
        password: 'password123',
        email_confirm: true,
        user_metadata: {
          first_name: 'Jean',
          last_name: 'Martin'
        }
      });

      if (profError) {
        console.log('‚ùå Erreur cr√©ation prof:', profError.message);
      } else {
        console.log('‚úÖ Professeur auth cr√©√©:', profUser.user.id);
        
        // Cr√©er le profil
        const { error: profProfileError } = await supabase
          .from('profiles')
          .insert({
            id: profUser.user.id,
            email: 'prof.martin@aurlom.com',
            first_name: 'Jean',
            last_name: 'Martin',
            role: 'ENSEIGNANT',
            campus_id: campus.id
          });
        
        if (profProfileError) {
          console.log('‚ùå Erreur cr√©ation profil prof:', profProfileError.message);
        } else {
          console.log('‚úÖ Profil professeur cr√©√©');
        }
      }
    }

    // 4. V√©rification finale
    console.log('\nüìã 4. V√âRIFICATION FINALE');
    console.log('-------------------------');
    
    const { data: allProfiles } = await supabase
      .from('profiles')
      .select('*');
    
    const { data: allCampus } = await supabase
      .from('campus')
      .select('*');
    
    console.log(`‚úÖ Profils cr√©√©s: ${allProfiles?.length || 0}`);
    console.log(`‚úÖ Campus cr√©√©s: ${allCampus?.length || 0}`);
    
    console.log('\nüéâ DONN√âES DE TEST CR√â√âES !');
    console.log('============================');
    console.log('Vous pouvez maintenant tester la cr√©ation de personnel via l\'interface');

  } catch (err) {
    console.log('‚ùå Erreur g√©n√©rale:', err);
  }
}

createTestData();
