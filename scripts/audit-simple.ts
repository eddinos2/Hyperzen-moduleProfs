import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function auditSimple() {
  console.log('üîç AUDIT SIMPLE DE LA BASE DE DONN√âES');
  console.log('=====================================\n');

  try {
    // 1. Test de connexion de base
    console.log('üìã 1. TEST CONNEXION');
    console.log('-------------------');
    console.log('üîó URL:', process.env.VITE_SUPABASE_URL);
    console.log('üîë Key:', process.env.SUPABASE_SERVICE_ROLE_KEY?.substring(0, 20) + '...');

    // 2. Test des tables principales
    console.log('\nüìã 2. TABLES PRINCIPALES');
    console.log('------------------------');
    
    // Test campus
    const { data: campus, error: campusError } = await supabase
      .from('campus')
      .select('*');
    
    if (campusError) {
      console.log('‚ùå Campus error:', campusError.message);
    } else {
      console.log(`‚úÖ Campus: ${campus?.length || 0} trouv√©s`);
      campus?.forEach(c => {
        console.log(`   üè¢ ${c.name} - ${c.address} (ID: ${c.id})`);
      });
    }

    // Test profiles
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*');
    
    if (profilesError) {
      console.log('‚ùå Profiles error:', profilesError.message);
    } else {
      console.log(`‚úÖ Profiles: ${profiles?.length || 0} trouv√©s`);
      profiles?.forEach(p => {
        console.log(`   üë§ ${p.email} - ${p.first_name} ${p.last_name} (${p.role}) - Campus: ${p.campus_id || 'Aucun'}`);
      });
    }

    // 3. Test des relations
    console.log('\nüìã 3. TEST RELATIONS');
    console.log('--------------------');
    
    const { data: profilesWithCampus, error: relationError } = await supabase
      .from('profiles')
      .select(`
        *,
        campus:campus_id(name, address)
      `);
    
    if (relationError) {
      console.log('‚ùå Relation error:', relationError.message);
      console.log('üîç D√©tails:', relationError);
    } else {
      console.log(`‚úÖ Relations: ${profilesWithCampus?.length || 0} test√©es`);
      profilesWithCampus?.forEach(p => {
        const campusName = p.campus?.name || 'Aucun';
        console.log(`   üë§ ${p.email} ‚Üí üè¢ ${campusName}`);
      });
    }

    // 4. Test cr√©ation d'un utilisateur
    console.log('\nüìã 4. TEST CR√âATION UTILISATEUR');
    console.log('-------------------------------');
    
    const testEmail = `test.audit.${Date.now()}@test.com`;
    console.log(`üìß Test avec: ${testEmail}`);
    
    // Cr√©er l'utilisateur auth
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: 'password123',
      email_confirm: true,
      user_metadata: {
        first_name: 'Test',
        last_name: 'Audit'
      }
    });
    
    if (authError) {
      console.log('‚ùå Auth creation error:', authError.message);
    } else {
      console.log('‚úÖ Utilisateur auth cr√©√©:', authUser.user.id);
      
      // Cr√©er le profil
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: authUser.user.id,
          email: testEmail,
          first_name: 'Test',
          last_name: 'Audit',
          role: 'ENSEIGNANT',
          campus_id: campus?.[0]?.id || null
        });
      
      if (profileError) {
        console.log('‚ùå Profile creation error:', profileError.message);
        console.log('üîç D√©tails:', profileError);
      } else {
        console.log('‚úÖ Profil cr√©√© avec succ√®s');
        
        // Test de la relation
        const { data: testProfile, error: testError } = await supabase
          .from('profiles')
          .select(`
            *,
            campus:campus_id(name, address)
          `)
          .eq('id', authUser.user.id)
          .single();
        
        if (testError) {
          console.log('‚ùå Test relation error:', testError.message);
        } else {
          console.log('‚úÖ Relation test√©e:', testProfile.campus?.name || 'Aucun campus');
        }
      }
      
      // Nettoyage
      await supabase.from('profiles').delete().eq('id', authUser.user.id);
      await supabase.auth.admin.deleteUser(authUser.user.id);
      console.log('üßπ Utilisateur de test supprim√©');
    }

    // 5. V√©rification des types
    console.log('\nüìã 5. V√âRIFICATION TYPES');
    console.log('-------------------------');
    
    // Test insertion avec diff√©rents r√¥les
    const testRoles = ['SUPER_ADMIN', 'DIRECTEUR_CAMPUS', 'COMPTABLE', 'ENSEIGNANT'];
    
    for (const role of testRoles) {
      console.log(`üîç Test r√¥le: ${role}`);
      
      const { data: testUser, error: testAuthError } = await supabase.auth.admin.createUser({
        email: `test.${role.toLowerCase()}.${Date.now()}@test.com`,
        password: 'password123',
        email_confirm: true
      });
      
      if (testAuthError) {
        console.log(`   ‚ùå Auth error pour ${role}:`, testAuthError.message);
      } else {
        const { error: testProfileError } = await supabase
          .from('profiles')
          .insert({
            id: testUser.user.id,
            email: `test.${role.toLowerCase()}.${Date.now()}@test.com`,
            first_name: 'Test',
            last_name: role,
            role: role,
            campus_id: role === 'DIRECTEUR_CAMPUS' ? campus?.[0]?.id : null
          });
        
        if (testProfileError) {
          console.log(`   ‚ùå Profile error pour ${role}:`, testProfileError.message);
        } else {
          console.log(`   ‚úÖ ${role} cr√©√© avec succ√®s`);
        }
        
        // Nettoyage
        await supabase.from('profiles').delete().eq('id', testUser.user.id);
        await supabase.auth.admin.deleteUser(testUser.user.id);
      }
    }

    console.log('\nüéØ R√âSUM√â');
    console.log('==========');
    console.log('‚úÖ Audit termin√©');
    console.log('üí° V√©rifiez les r√©sultats ci-dessus');

  } catch (err) {
    console.log('‚ùå Erreur g√©n√©rale:', err);
  }
}

auditSimple();
