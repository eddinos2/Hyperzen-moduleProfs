import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function auditPersonnelCreation() {
  console.log('üîç AUDIT CR√âATION DE PERSONNEL - SUPERADMIN');
  console.log('============================================\n');

  try {
    // 1. V√©rifier les pages de gestion du personnel
    console.log('üìã 1. V√âRIFICATION DES PAGES DE GESTION');
    console.log('----------------------------------------');
    
    const pages = [
      'src/pages/PersonnelPage.tsx',
      'src/pages/ProfessorsPage.tsx', 
      'src/pages/CampusPage.tsx',
      'src/pages/AdminDashboard.tsx'
    ];
    
    for (const page of pages) {
      console.log(`üìÑ ${page}: Existe`);
    }

    // 2. V√©rifier les hooks de gestion
    console.log('\nüìã 2. V√âRIFICATION DES HOOKS');
    console.log('-----------------------------');
    
    const hooks = [
      'src/hooks/usePersonnel.ts',
      'src/hooks/useProfessors.ts',
      'src/hooks/useCampus.ts'
    ];
    
    for (const hook of hooks) {
      console.log(`üîó ${hook}: Existe`);
    }

    // 3. Test de cr√©ation d'un utilisateur complet
    console.log('\nüìã 3. TEST CR√âATION UTILISATEUR COMPLET');
    console.log('----------------------------------------');
    
    // R√©cup√©rer un campus
    const { data: campus } = await supabase
      .from('campus')
      .select('id, name')
      .limit(1)
      .single();
    
    if (!campus) {
      console.log('‚ùå Aucun campus trouv√©');
      return;
    }
    
    console.log(`üè¢ Campus de test: ${campus.name}`);

    // Test cr√©ation professeur
    console.log('\nüë®‚Äçüè´ Test cr√©ation professeur...');
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email: 'test.prof@audit.com',
      password: 'password123',
      email_confirm: true,
      user_metadata: {
        first_name: 'Test',
        last_name: 'Professeur'
      }
    });
    
    if (authError) {
      console.log('‚ùå Erreur cr√©ation auth:', authError.message);
    } else {
      console.log('‚úÖ Utilisateur auth cr√©√©:', authUser.user.id);
      
      // Cr√©er le profil
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: authUser.user.id,
          email: 'test.prof@audit.com',
          first_name: 'Test',
          last_name: 'Professeur',
          role: 'ENSEIGNANT',
          campus_id: campus.id
        });
      
      if (profileError) {
        console.log('‚ùå Erreur cr√©ation profil:', profileError.message);
      } else {
        console.log('‚úÖ Profil cr√©√© avec succ√®s');
      }
    }

    // Test cr√©ation directeur
    console.log('\nüë®‚Äçüíº Test cr√©ation directeur...');
    const { data: authDirector, error: authDirectorError } = await supabase.auth.admin.createUser({
      email: 'test.directeur@audit.com',
      password: 'password123',
      email_confirm: true,
      user_metadata: {
        first_name: 'Test',
        last_name: 'Directeur'
      }
    });
    
    if (authDirectorError) {
      console.log('‚ùå Erreur cr√©ation auth directeur:', authDirectorError.message);
    } else {
      console.log('‚úÖ Utilisateur auth directeur cr√©√©:', authDirector.user.id);
      
      // Cr√©er le profil directeur
      const { error: profileDirectorError } = await supabase
        .from('profiles')
        .insert({
          id: authDirector.user.id,
          email: 'test.directeur@audit.com',
          first_name: 'Test',
          last_name: 'Directeur',
          role: 'DIRECTEUR_CAMPUS',
          campus_id: campus.id
        });
      
      if (profileDirectorError) {
        console.log('‚ùå Erreur cr√©ation profil directeur:', profileDirectorError.message);
      } else {
        console.log('‚úÖ Profil directeur cr√©√© avec succ√®s');
        
        // Assigner le directeur au campus
        const { error: assignError } = await supabase
          .from('campus')
          .update({ directeur_id: authDirector.user.id })
          .eq('id', campus.id);
        
        if (assignError) {
          console.log('‚ùå Erreur assignation directeur:', assignError.message);
        } else {
          console.log('‚úÖ Directeur assign√© au campus');
        }
      }
    }

    // Test cr√©ation comptable
    console.log('\nüíº Test cr√©ation comptable...');
    const { data: authComptable, error: authComptableError } = await supabase.auth.admin.createUser({
      email: 'test.comptable@audit.com',
      password: 'password123',
      email_confirm: true,
      user_metadata: {
        first_name: 'Test',
        last_name: 'Comptable'
      }
    });
    
    if (authComptableError) {
      console.log('‚ùå Erreur cr√©ation auth comptable:', authComptableError.message);
    } else {
      console.log('‚úÖ Utilisateur auth comptable cr√©√©:', authComptable.user.id);
      
      // Cr√©er le profil comptable
      const { error: profileComptableError } = await supabase
        .from('profiles')
        .insert({
          id: authComptable.user.id,
          email: 'test.comptable@audit.com',
          first_name: 'Test',
          last_name: 'Comptable',
          role: 'COMPTABLE',
          campus_id: null
        });
      
      if (profileComptableError) {
        console.log('‚ùå Erreur cr√©ation profil comptable:', profileComptableError.message);
      } else {
        console.log('‚úÖ Profil comptable cr√©√© avec succ√®s');
      }
    }

    // 4. V√©rification des donn√©es cr√©√©es
    console.log('\nüìã 4. V√âRIFICATION DES DONN√âES CR√â√âES');
    console.log('--------------------------------------');
    
    const { data: allProfiles } = await supabase
      .from('profiles')
      .select('id, email, first_name, last_name, role, campus_id')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (allProfiles) {
      console.log('üë• Derniers profils cr√©√©s:');
      allProfiles.forEach(profile => {
        console.log(`   üîπ ${profile.email} - ${profile.first_name} ${profile.last_name} (${profile.role})`);
      });
    }

    // 5. Test des requ√™tes frontend
    console.log('\nüìã 5. TEST DES REQU√äTES FRONTEND');
    console.log('--------------------------------');
    
    // Test usePersonnel
    const { data: personnel, error: personnelError } = await supabase
      .from('profiles')
      .select(`
        *,
        campus:campus_id(name)
      `)
      .order('created_at', { ascending: false });
    
    if (personnelError) {
      console.log('‚ùå usePersonnel:', personnelError.message);
    } else {
      console.log(`‚úÖ usePersonnel: ${personnel?.length || 0} profils r√©cup√©r√©s`);
    }

    // Test useCampus
    const { data: campuses, error: campusError } = await supabase
      .from('campus')
      .select(`
        *,
        profiles:directeur_id(first_name, last_name, email)
      `)
      .order('name');
    
    if (campusError) {
      console.log('‚ùå useCampus:', campusError.message);
    } else {
      console.log(`‚úÖ useCampus: ${campuses?.length || 0} campus r√©cup√©r√©s`);
      campuses?.forEach(campus => {
        const directeur = campus.profiles ? `${campus.profiles.first_name} ${campus.profiles.last_name}` : 'Aucun';
        console.log(`   üè¢ ${campus.name}: ${directeur}`);
      });
    }

    // 6. Nettoyage
    console.log('\nüßπ 6. NETTOYAGE');
    console.log('---------------');
    
    if (authUser?.user) {
      await supabase.from('profiles').delete().eq('id', authUser.user.id);
      await supabase.auth.admin.deleteUser(authUser.user.id);
    }
    
    if (authDirector?.user) {
      await supabase.from('profiles').delete().eq('id', authDirector.user.id);
      await supabase.auth.admin.deleteUser(authDirector.user.id);
    }
    
    if (authComptable?.user) {
      await supabase.from('profiles').delete().eq('id', authComptable.user.id);
      await supabase.auth.admin.deleteUser(authComptable.user.id);
    }
    
    console.log('‚úÖ Donn√©es de test supprim√©es');

    console.log('\nüéâ AUDIT CR√âATION PERSONNEL TERMIN√â !');
    console.log('=====================================');

  } catch (err) {
    console.log('‚ùå Erreur g√©n√©rale:', err);
  }
}

auditPersonnelCreation();
