import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function addAuditColumns() {
  console.log('üîß Ajout des colonnes d\'audit √† invoice_lines...');
  
  try {
    // V√©rifier la connexion
    const { error: testError } = await supabase
      .from('invoice_lines')
      .select('id')
      .limit(1);
    
    if (testError) {
      console.log('‚ùå Erreur connexion:', testError.message);
      return;
    }
    
    console.log('‚úÖ Connexion DB OK');
    
    // Ajouter les colonnes une par une
    const columns = [
      { name: 'prevalidated_by', type: 'uuid REFERENCES profiles(id)' },
      { name: 'prevalidated_at', type: 'timestamptz' },
      { name: 'validated_by', type: 'uuid REFERENCES profiles(id)' },
      { name: 'validated_at', type: 'timestamptz' },
      { name: 'paid_by', type: 'uuid REFERENCES profiles(id)' },
      { name: 'paid_at', type: 'timestamptz' },
      { name: 'updated_at', type: 'timestamptz DEFAULT now()' }
    ];
    
    for (const column of columns) {
      console.log(`üìù Ajout de ${column.name}...`);
      
      // Simuler l'ajout (on ne peut pas ex√©cuter ALTER TABLE via Supabase client)
      console.log(`   ‚úÖ ${column.name} (${column.type}) - Simulation`);
    }
    
    console.log('üéâ Colonnes d\'audit ajout√©es (simulation)');
    console.log('üìã Pour appliquer r√©ellement, ex√©cutez le SQL dans Supabase Studio');
    
  } catch (err) {
    console.log('‚ùå Erreur:', err);
  }
}

addAuditColumns();
